def runjobs(infile,argument):
	filepath,filename=os.path.split(infile)

	if filepath == "":
		filepath=os.getcwd()

	try:
		date_var = str(datetime.now().strftime("%y%m%d%H%M%S%f"))

		logfilename = 'jobsubmit.' + date_var + '.log'
		print("\nMonitor workflow status from %s" %(logfilename))
		logging.basicConfig(filename=logfilename, filemode='w', format='%(asctime)s - %(process)d - %(levelname)s - %(message)s', datefmt='%d-%b-%y %H:%M:%S', level=logging.INFO)
		f = open (infile, 'r')
		logging.info('================================')
		logging.info('>>>Program Started')
		logging.info('================================')
		logging.info("jobsubmit"+"\t"+major_version+"."+minor_version+"."+revision_version)
		logging.info('--------------------------------')
		logging.info('Input file found in directory: %s', filepath)
		logging.info('Current directory: %s', os.getcwd())
		logging.info('Input file : %s', filename)
		logging.info('Reading input file %s', filename)
		logging.info('--------------------------------')
		logging.info('Queued Workflow')
		logging.info('--------------------------------')
		counter = 1
		for i in argument:
			logging.info('Queued Workflow # %d from line # %d',counter,i)
			counter = counter + 1
		logging.info('--------------------------------')
		logging.info('Total Workflows queued : %d',len(argument))
		logging.info('--------------------------------')
		os.makedirs("stdout", exist_ok = True)
		os.makedirs("stderr", exist_ok = True)
		os.makedirs("notdone", exist_ok = True)
		os.makedirs("done", exist_ok = True)

		job=f.readlines()

		wf_counter = 1
		failed_counter = 0
		completed_counter = 0


		for i in argument:
			j = i - 1
			cmd1=job[j]


			cmd=cmd1.strip()

			fout = open("stdout/"+filename+"_line_"+str(i)+".out",'w')
			ferr = open("stderr/"+filename+"_line_"+str(i)+".err",'w')

			proc = subprocess.Popen(cmd,shell=True,stdout=fout,stderr=ferr)
			logging.info('Workflow # %d of %d started from %s at line # %d with pid: %d', wf_counter,len(argument) ,filename,i,proc.pid)
			#print('Workflow # %d of %d started from %s at line # %d with pid: %d' %(wf_counter,len(argument) ,filename,i,proc.pid))
			signal.signal(signal.SIGTERM, handle_exceptions)

			try:
				proc.wait()

			except KeyboardInterrupt:
				logging.critical('Manual interuption encountered.')
				proc.kill()
				logging.error('Workflow # %d aborted from %s at line # %d due to manual interuption with exit code: 130', wf_counter,filename,i)
				failed_counter = failed_counter + 1
				logging.info('--------------------------------')
				logging.info('Summary')
				logging.info('--------------------------------')
				logging.info('Completed workflows  : %d',completed_counter)
				logging.info('Failed workflows     : %d',failed_counter)
				logging.info('Pending workflows    : %d',len(argument) - failed_counter-completed_counter)
				logging.info('--------------------------------')
				logging.info('================================')
				logging.info('>>>Program Completed')
				logging.info('================================')
				print("\nEncoutered manual interuption from user. Terminating all queued workflows.")
				print("\nTerminated due to manual interuption at %s" %(str(datetime.now().strftime("%y/%m/%d %H:%M:%S:%f"))))
				print("--------------------------------------------------------------------------")
				exit(-1)



			if proc.returncode != 0:
				logging.error('Workflow # %d failed from %s at line # %d with exit code: %d', wf_counter,filename,i,proc.returncode)
				fnotdone = open("notdone/"+filename+"_line_"+str(i)+".lock",'w')
				failed_counter = failed_counter + 1

			else:
				logging.info('Workflow # %d completed from %s at line # %d with exit code: %d', wf_counter,filename,i,proc.returncode)
				fdone = open("done/"+filename+"_line_"+str(i)+".lock",'w')
				completed_counter = completed_counter + 1
			wf_counter = wf_counter + 1
		logging.info('--------------------------------')
		logging.info('Summary')
		logging.info('--------------------------------')
		logging.info('Completed workflows  : %d',completed_counter)
		logging.info('Failed workflows     : %d',failed_counter)
		logging.info('Pending workflows    : %d',len(argument) - failed_counter-completed_counter)
		logging.info('--------------------------------')
		logging.info('================================')
		logging.info('>>>Program Completed')
		logging.info('================================')

	except IOError as e:
		print(e)
		#logging.critical('Input file %s not found in directory: %s', filename, filepath)
